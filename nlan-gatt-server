#!/usr/bin/env python3
# SPDX-License-Identifier: LGPL-2.1-or-later

import dbus
import dbus.exceptions
import dbus.mainloop.glib
import dbus.service
import subprocess
import array
from gi.repository import GLib
import sys
import os
import asyncio
import threading

from random import randint

mainloop = None

BLUEZ_SERVICE_NAME = 'org.bluez'
GATT_MANAGER_IFACE = 'org.bluez.GattManager1'
DBUS_OM_IFACE =      'org.freedesktop.DBus.ObjectManager'
DBUS_PROP_IFACE =    'org.freedesktop.DBus.Properties'

GATT_SERVICE_IFACE = 'org.bluez.GattService1'
GATT_CHRC_IFACE =    'org.bluez.GattCharacteristic1'
GATT_DESC_IFACE =    'org.bluez.GattDescriptor1'

CON_CHRC_UUID = 'c1da1ac1-a3e8-4d81-a0e6-5bbee9802401'
TTY_PATH = "/tmp/ttyBLE0"

class InvalidArgsException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.freedesktop.DBus.Error.InvalidArgs'

class NotSupportedException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.NotSupported'

class NotPermittedException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.NotPermitted'

class InvalidValueLengthException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.InvalidValueLength'

class FailedException(dbus.exceptions.DBusException):
    _dbus_error_name = 'org.bluez.Error.Failed'


class Application(dbus.service.Object):
    """
    org.bluez.GattApplication1 interface implementation
    """
    def __init__(self, bus):
        self.path = '/'
        self.services = []
        dbus.service.Object.__init__(self, bus, self.path)
        #self.add_service(HeartRateService(bus, 0))
        #self.add_service(BatteryService(bus, 1))
        self.add_service(ConsoleService(bus,0))

    def get_path(self):
        return dbus.ObjectPath(self.path)

    def add_service(self, service):
        self.services.append(service)

    @dbus.service.method(DBUS_OM_IFACE, out_signature='a{oa{sa{sv}}}')
    def GetManagedObjects(self):
        response = {}
        print('GetManagedObjects')

        for service in self.services:
            response[service.get_path()] = service.get_properties()
            chrcs = service.get_characteristics()
            for chrc in chrcs:
                response[chrc.get_path()] = chrc.get_properties()
                descs = chrc.get_descriptors()
                for desc in descs:
                    response[desc.get_path()] = desc.get_properties()

        return response


class Service(dbus.service.Object):
    """
    org.bluez.GattService1 interface implementation
    """
    PATH_BASE = '/org/bluez/nlan/service'

    def __init__(self, bus, index, uuid, primary):
        self.path = self.PATH_BASE + str(index)
        self.bus = bus
        self.uuid = uuid
        self.primary = primary
        self.characteristics = []
        dbus.service.Object.__init__(self, bus, self.path)

    def get_properties(self):
        return {
                GATT_SERVICE_IFACE: {
                        'UUID': self.uuid,
                        'Primary': self.primary,
                        'Characteristics': dbus.Array(
                                self.get_characteristic_paths(),
                                signature='o')
                }
        }

    def get_path(self):
        return dbus.ObjectPath(self.path)

    def add_characteristic(self, characteristic):
        self.characteristics.append(characteristic)

    def get_characteristic_paths(self):
        result = []
        for chrc in self.characteristics:
            result.append(chrc.get_path())
        return result

    def get_characteristics(self):
        return self.characteristics

    @dbus.service.method(DBUS_PROP_IFACE,
                         in_signature='s',
                         out_signature='a{sv}')
    def GetAll(self, interface):
        if interface != GATT_SERVICE_IFACE:
            raise InvalidArgsException()

        return self.get_properties()[GATT_SERVICE_IFACE]


class Characteristic(dbus.service.Object):
    """
    org.bluez.GattCharacteristic1 interface implementation
    """
    def __init__(self, bus, index, uuid, flags, service):
        self.path = service.path + '/char' + str(index)
        self.bus = bus
        self.uuid = uuid
        self.service = service
        self.flags = flags
        self.descriptors = []
        dbus.service.Object.__init__(self, bus, self.path)

    def get_properties(self):
        return {
                GATT_CHRC_IFACE: {
                        'Service': self.service.get_path(),
                        'UUID': self.uuid,
                        'Flags': self.flags,
                        'Descriptors': dbus.Array(
                                self.get_descriptor_paths(),
                                signature='o')
                }
        }

    def get_path(self):
        return dbus.ObjectPath(self.path)

    def add_descriptor(self, descriptor):
        self.descriptors.append(descriptor)

    def get_descriptor_paths(self):
        result = []
        for desc in self.descriptors:
            result.append(desc.get_path())
        return result

    def get_descriptors(self):
        return self.descriptors

    @dbus.service.method(DBUS_PROP_IFACE,
                         in_signature='s',
                         out_signature='a{sv}')
    def GetAll(self, interface):
        if interface != GATT_CHRC_IFACE:
            raise InvalidArgsException()

        return self.get_properties()[GATT_CHRC_IFACE]

    @dbus.service.method(GATT_CHRC_IFACE,
                        in_signature='a{sv}',
                        out_signature='ay')
    def ReadValue(self, options):
        print('Default ReadValue called, returning error')
        raise NotSupportedException()

    @dbus.service.method(GATT_CHRC_IFACE, in_signature='aya{sv}')
    def WriteValue(self, value, options):
        print('Default WriteValue called, returning error')
        raise NotSupportedException()

    @dbus.service.method(GATT_CHRC_IFACE)
    def StartNotify(self):
        print('Default StartNotify called, returning error')
        raise NotSupportedException()

    @dbus.service.method(GATT_CHRC_IFACE)
    def StopNotify(self):
        print('Default StopNotify called, returning error')
        raise NotSupportedException()

    @dbus.service.signal(DBUS_PROP_IFACE,
                         signature='sa{sv}as')
    def PropertiesChanged(self, interface, changed, invalidated):
        pass


class Descriptor(dbus.service.Object):
    """
    org.bluez.GattDescriptor1 interface implementation
    """
    def __init__(self, bus, index, uuid, flags, characteristic):
        self.path = characteristic.path + '/desc' + str(index)
        self.bus = bus
        self.uuid = uuid
        self.flags = flags
        self.chrc = characteristic
        dbus.service.Object.__init__(self, bus, self.path)

    def get_properties(self):
        return {
                GATT_DESC_IFACE: {
                        'Characteristic': self.chrc.get_path(),
                        'UUID': self.uuid,
                        'Flags': self.flags,
                }
        }

    def get_path(self):
        return dbus.ObjectPath(self.path)

    @dbus.service.method(DBUS_PROP_IFACE,
                         in_signature='s',
                         out_signature='a{sv}')
    def GetAll(self, interface):
        if interface != GATT_DESC_IFACE:
            raise InvalidArgsException()

        return self.get_properties()[GATT_DESC_IFACE]

    @dbus.service.method(GATT_DESC_IFACE,
                        in_signature='a{sv}',
                        out_signature='ay')
    def ReadValue(self, options):
        print ('Default ReadValue called, returning error')
        raise NotSupportedException()

    @dbus.service.method(GATT_DESC_IFACE, in_signature='aya{sv}')
    def WriteValue(self, value, options):
        print('Default WriteValue called, returning error')
        raise NotSupportedException()

class ConsoleService(Service):
    """
    This is main service of this gatt server application
    """
    CON_SVC_UUID = 'c1da1ac1-a3e8-4d81-a0e6-5bbee9802400'

    def __init__(self, bus, index):
        Service.__init__(self, bus, index, self.CON_SVC_UUID, True)
        self.add_characteristic(ConsoleCharacteristic(bus, 0, self))


"""
Main Characteristic
"""
class ConsoleCharacteristic(Characteristic):
    """
    Main characteristic requiring secure connection.
    """
    #CON_CHRC_UUID = 'c1da1ac1-a3e8-4d81-a0e6-5bbee9802401'

    def __init__(self, bus, index, service):
        Characteristic.__init__(
                self, bus, index,
                CON_CHRC_UUID,
                ['secure-read', 'secure-write', 'notify'],
                service)
        self.value = b""
        self.command = b""
        self.notifying = False
        self.testvalue = [0x31, 0x36]
        self.result_str = ""
        self.tty_in = open(TTY_PATH, "wb", buffering=0)
        self.tty_out = open(TTY_PATH, "rb", buffering=0)

        self.add_descriptor(ConsoleTxDescriptor(bus, 0, self))
        self.add_descriptor(
                CharacteristicUserDescriptionDescriptor(bus, 1, self))
        # CCCD（Client Characteristic Configuration Descriptor）を追加

        self.add_descriptor(ConsoleCCCDDescriptor(bus, 2, self))

    async def notify_loop(self):
        while True:
            output = self.tty_out.read(500)
            if output:
                print("into tty_out.read")
                self.result_str = self.result_str + output.decode('utf-8', errors='replace')
                if self.notifying:
                    print(f"Output:{output}")
                    self.send_result(output)

    def send_result(self, output: str):
        self.PropertiesChanged(
             GATT_CHRC_IFACE,
            #{'Value': [dbus.Byte(b) for b in output.encode()]},
            {'Value': [dbus.Byte(b) for b in output]},
            []
        )

    def WriteValue(self, value, options):
        try:
            print('ConsoleCharacteristic Write: ' + repr(value))

            # value を bytes に変換（dbus.Array 対策）
            if not isinstance(value, bytes):
                value = bytes(value)

            self.value = value
            self.command = self.value.decode('utf-8', errors='ignore')
            print(f"current str: {self.command}")

            try:
                # result = subprocess.run(self.command, shell=True, capture_output=True, text=True, timeout=5)
                self.tty_in.write(self.value + b'\n')
                #output = result.stdout.strip() or result.stderr.strip()
                #self.result_str = output
                #if self.notifying:
                #    print(f"Output:{output}")
                #    self.send_result(output)

            except Exception as e:
                error_msg = f"Error: {e}"
                print(f"{error_msg}")
                self.send_result(error_msg)

        except Exception as e:
            print(f"[WriteValue Exception] {e}")

    def StartNotify(self):
        if self.notifying:
            return
        self.notifying = True

    def StopNotify(self):
        self.notifying = False

    def ReadValue(self, options):
        try:
            print(f"ReadValue:{self.result_str}")
            send_str = self.result_str
            self.result_str = ""
            return [dbus.Byte(b) for b in send_str.encode()]
        except Exception as e:
            error_msg = f"Error: {e}"
            print(f"{error_msg}")
            self.send_result(error_msg)

class ConsoleTxDescriptor(Descriptor):
    """
    Test descriptor
    """
    TEST_DESC_UUID = 'c1da1ac1-a3e8-4d81-a0e6-5bbee9802402'

    def __init__(self, bus, index, characteristic):
        Descriptor.__init__(
                self, bus, index,
                self.TEST_DESC_UUID,
                ['read', 'write'],
                characteristic)

    def ReadValue(self, options):
        return [
                dbus.Byte('T'), dbus.Byte('e'), dbus.Byte('s'), dbus.Byte('t')
        ]


class CharacteristicUserDescriptionDescriptor(Descriptor):
    """
    Writable CUD descriptor.

    """
    CUD_UUID = '2901'

    def __init__(self, bus, index, characteristic):
        self.writable = 'writable-auxiliaries' in characteristic.flags
        self.value = array.array('B', b'This is a characteristic for testing')
        self.value = self.value.tolist()
        Descriptor.__init__(
                self, bus, index,
                self.CUD_UUID,
                ['read', 'write'],
                characteristic)

    def ReadValue(self, options):
        return self.value

    def WriteValue(self, value, options):
        if not self.writable:
            raise NotPermittedException()
        self.value = value

"""
BLEにおいて CCCD (Client Characteristic Configuration Descriptor) は、
notify(通知)やindicate(確認付き通知)を有効化・無効化するための唯一の手段
つまり、notifyを使いたいならCCCDは絶対に必要
"""
class ConsoleCCCDDescriptor(Descriptor):
    """
    CCCD descriptor with sucured write required.
    """

    CCCD_UUID = '2902'

    def __init__(self, bus, index, characteristic):
        Descriptor.__init__(
            self, bus, index,
            self.CCCD_UUID,
            ['secure-write'],
            characteristic)

        self.value = [0x00, 0x00]
        """
        0x0000: OFF
        0x0001: Notify ON
        0x0002: Indicate ON (Wait ACK)
        """

    def ReadValue(self, options):
        return self.value

    def WriteValue(self, value, options):
        self.value = value


""" 
Main
""" 

def register_app_cb(con_char):
    print('GATT application registered')

    def run_notify_loop():
        asyncio.run(con_char.notify_loop())

    threading.Thread(target=run_notify_loop, daemon=True).start()


def register_app_error_cb(error):
    print('Failed to register application: ' + str(error))
    mainloop.quit()


def find_adapter(bus):
    remote_om = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, '/'),
                               DBUS_OM_IFACE)
    objects = remote_om.GetManagedObjects()

    for o, props in objects.items():
        if GATT_MANAGER_IFACE in props.keys():
            return o

    return None

def provisioning_host():


    if os.path.exists(TTY_PATH):
        return 0

    # socat を使って仮想TTYと bash を接続
    socat_cmd = [
        "socat",
        "pty,raw,echo=0,link=" + TTY_PATH ,
        'exec:"bash",pty,stderr,setsid,sigint,sane'
    ]
    socat0 = subprocess.Popen(socat_cmd)

   

def main():

    provisioning_host()

    global mainloop

    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    bus = dbus.SystemBus()

    adapter = find_adapter(bus)
    if not adapter:
        print('GattManager1 interface not found')
        return

    service_manager = dbus.Interface(
            bus.get_object(BLUEZ_SERVICE_NAME, adapter),
            GATT_MANAGER_IFACE)

    app = Application(bus)

    # appからConsoleCharacteristicのインスタンスを取得
    for service in app.services:
        for char in service.characteristics:
            if char.uuid == CON_CHRC_UUID:
                con_char = char

    mainloop = GLib.MainLoop()

    service_manager.RegisterApplication(app.get_path(), {},
                                    reply_handler=lambda: register_app_cb(con_char),
                                    error_handler=register_app_error_cb)

    print('start mainloop')
    mainloop.run()

if __name__ == '__main__':
    asyncio.run(main())

